{"level":"info","message":"Starting MCP server","service":"mcp-puppeteer","timestamp":"2025-08-06 14:24:47.247"}
{"level":"info","message":"MCP server started successfully","service":"mcp-puppeteer","timestamp":"2025-08-06 14:24:47.248"}
{"arguments":{},"level":"debug","message":"Tool call received","service":"mcp-puppeteer","timestamp":"2025-08-06 14:32:28.554","tool":"puppeteer_connect_active_tab"}
{"0":"n","1":"p","2":"x","level":"info","message":"Launching browser with config:","service":"mcp-puppeteer","timestamp":"2025-08-06 14:32:28.555"}
{"level":"info","message":"Browser launched successfully","service":"mcp-puppeteer","timestamp":"2025-08-06 14:32:30.515"}
{"arguments":{},"level":"debug","message":"Tool call received","service":"mcp-puppeteer","timestamp":"2025-08-06 14:36:52.011","tool":"puppeteer_connect_active_tab"}
{"level":"info","message":"Connecting to existing browser","service":"mcp-puppeteer","timestamp":"2025-08-06 14:36:52.018","wsEndpoint":"ws://localhost:9222/devtools/browser/5d284c39-6e34-4315-abba-b667bcb66d97"}
{"level":"debug","message":"Closing existing browser connection","service":"mcp-puppeteer","timestamp":"2025-08-06 14:36:52.018"}
{"level":"debug","message":"Establishing connection to browser","service":"mcp-puppeteer","timestamp":"2025-08-06 14:36:52.018"}
{"level":"info","message":"Successfully connected to browser","service":"mcp-puppeteer","timestamp":"2025-08-06 14:36:52.022"}
{"level":"info","message":"Found active webpage:","service":"mcp-puppeteer","timestamp":"2025-08-06 14:36:52.027","title":"localhost","url":"chrome-error://chromewebdata/"}
{"arguments":{"url":"http://localhost:3001"},"level":"debug","message":"Tool call received","service":"mcp-puppeteer","timestamp":"2025-08-06 14:36:55.465","tool":"puppeteer_navigate"}
{"level":"info","message":"Navigating to URL","service":"mcp-puppeteer","timestamp":"2025-08-06 14:36:55.465","url":"http://localhost:3001"}
{"error":"net::ERR_CONNECTION_REFUSED at http://localhost:3001","level":"error","message":"Navigation failed","service":"mcp-puppeteer","timestamp":"2025-08-06 14:36:55.504","url":"http://localhost:3001"}
{"arguments":{"url":"http://localhost:3001/login"},"level":"debug","message":"Tool call received","service":"mcp-puppeteer","timestamp":"2025-08-06 14:42:48.784","tool":"puppeteer_navigate"}
{"level":"info","message":"Navigating to URL","service":"mcp-puppeteer","timestamp":"2025-08-06 14:42:48.785","url":"http://localhost:3001/login"}
{"level":"info","message":"Navigation successful","service":"mcp-puppeteer","status":200,"timestamp":"2025-08-06 14:42:49.878","url":"http://localhost:3001/login"}
{"arguments":{"selector":"input[type=\"email\"]","value":"mitch.driftless@gmail.com"},"level":"debug","message":"Tool call received","service":"mcp-puppeteer","timestamp":"2025-08-06 14:42:54.239","tool":"puppeteer_fill"}
{"arguments":{"selector":"input[type=\"password\"]","value":"yotyping"},"level":"debug","message":"Tool call received","service":"mcp-puppeteer","timestamp":"2025-08-06 14:42:57.522","tool":"puppeteer_fill"}
{"arguments":{"selector":"button[type=\"submit\"]"},"level":"debug","message":"Tool call received","service":"mcp-puppeteer","timestamp":"2025-08-06 14:43:02.434","tool":"puppeteer_click"}
{"arguments":{"selector":"button:contains('Sign in')"},"level":"debug","message":"Tool call received","service":"mcp-puppeteer","timestamp":"2025-08-06 14:46:07.766","tool":"puppeteer_click"}
{"arguments":{"script":"// Find and click the login button\nconst loginButton = document.querySelector('button[type=\"submit\"]') || \n                   document.querySelector('button[form]') || \n                   document.querySelector('button') ||\n                   document.querySelector('[data-testid=\"login-button\"]');\n\nif (loginButton) {\n  loginButton.click();\n  return { success: true, buttonText: loginButton.textContent };\n} else {\n  return { success: false, error: 'No login button found', forms: document.forms.length };\n}"},"level":"debug","message":"Tool call received","service":"mcp-puppeteer","timestamp":"2025-08-06 14:46:13.516","tool":"puppeteer_evaluate"}
{"level":"debug","message":"Executing script in browser","scriptLength":508,"service":"mcp-puppeteer","timestamp":"2025-08-06 14:46:13.516"}
{"hasResult":true,"level":"debug","logCount":0,"message":"Script execution result","resultType":"object","service":"mcp-puppeteer","timestamp":"2025-08-06 14:46:13.525"}
{"arguments":{"script":"// Wait for navigation and then go to cataloging page\nsetTimeout(() => {\n  if (window.location.pathname !== '/login') {\n    window.location.href = '/cataloging';\n  }\n}, 2000);\n\nreturn { currentUrl: window.location.href, pathname: window.location.pathname };"},"level":"debug","message":"Tool call received","service":"mcp-puppeteer","timestamp":"2025-08-06 14:46:18.146","tool":"puppeteer_evaluate"}
{"level":"debug","message":"Executing script in browser","scriptLength":257,"service":"mcp-puppeteer","timestamp":"2025-08-06 14:46:18.146"}
{"hasResult":true,"level":"debug","logCount":0,"message":"Script execution result","resultType":"object","service":"mcp-puppeteer","timestamp":"2025-08-06 14:46:18.147"}
{"arguments":{"url":"http://localhost:3001/cataloging"},"level":"debug","message":"Tool call received","service":"mcp-puppeteer","timestamp":"2025-08-06 14:46:21.744","tool":"puppeteer_navigate"}
{"level":"info","message":"Navigating to URL","service":"mcp-puppeteer","timestamp":"2025-08-06 14:46:21.744","url":"http://localhost:3001/cataloging"}
{"level":"info","message":"Navigation successful","service":"mcp-puppeteer","status":200,"timestamp":"2025-08-06 14:46:23.878","url":"http://localhost:3001/cataloging"}
{"arguments":{"script":"// Get console logs and debug information\nconst logs = [];\nconst debugInfo = {};\n\n// Check if there are any console messages we can see\nconsole.log('=== DEBUG CHECK ===');\n\n// Return current page info and any visible debug information\nreturn {\n  url: window.location.href,\n  title: document.title,\n  hasReactQuery: typeof window.__REACT_QUERY_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined',\n  bodyContent: document.body.innerText.substring(0, 500),\n  headContent: document.head.innerHTML.substring(0, 200),\n  reactInstances: Object.keys(window).filter(key => key.startsWith('__REACT')),\n};"},"level":"debug","message":"Tool call received","service":"mcp-puppeteer","timestamp":"2025-08-06 14:46:30.591","tool":"puppeteer_evaluate"}
{"level":"debug","message":"Executing script in browser","scriptLength":581,"service":"mcp-puppeteer","timestamp":"2025-08-06 14:46:30.591"}
{"hasResult":true,"level":"debug","logCount":1,"message":"Script execution result","resultType":"object","service":"mcp-puppeteer","timestamp":"2025-08-06 14:46:30.593"}
{"arguments":{"script":"// Create a promise to capture console logs\nconst consoleLogs = [];\nconst originalLog = console.log;\n\n// Override console.log to capture logs\nconsole.log = function(...args) {\n  consoleLogs.push(args.join(' '));\n  originalLog.apply(console, arguments);\n};\n\n// Wait a moment for any async operations to complete\nsetTimeout(() => {\n  console.log = originalLog; // Restore original\n}, 100);\n\n// Return what we've captured so far and trigger a re-render if possible\nreturn {\n  captured: consoleLogs,\n  ready: 'Monitoring console logs...'\n};"},"level":"debug","message":"Tool call received","service":"mcp-puppeteer","timestamp":"2025-08-06 14:46:40.869","tool":"puppeteer_evaluate"}
{"level":"debug","message":"Executing script in browser","scriptLength":536,"service":"mcp-puppeteer","timestamp":"2025-08-06 14:46:40.869"}
{"hasResult":true,"level":"debug","logCount":0,"message":"Script execution result","resultType":"object","service":"mcp-puppeteer","timestamp":"2025-08-06 14:46:40.870"}
{"arguments":{"script":"// Refresh the page to get new debug logs\nwindow.location.reload();\nreturn { status: 'refreshing' };"},"level":"debug","message":"Tool call received","service":"mcp-puppeteer","timestamp":"2025-08-06 14:47:52.359","tool":"puppeteer_evaluate"}
{"level":"debug","message":"Executing script in browser","scriptLength":100,"service":"mcp-puppeteer","timestamp":"2025-08-06 14:47:52.359"}
{"hasResult":true,"level":"debug","logCount":0,"message":"Script execution result","resultType":"object","service":"mcp-puppeteer","timestamp":"2025-08-06 14:47:52.360"}
{"arguments":{"script":"// Wait for page to load and capture console logs\nreturn new Promise((resolve) => {\n  const originalLog = console.log;\n  const logs = [];\n  \n  console.log = function(...args) {\n    const logMessage = args.map(arg => \n      typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)\n    ).join(' ');\n    \n    if (logMessage.includes('DEBUG')) {\n      logs.push(logMessage);\n    }\n    \n    originalLog.apply(console, arguments);\n  };\n  \n  // Wait for components to render and queries to execute\n  setTimeout(() => {\n    console.log = originalLog;\n    resolve({\n      debugLogs: logs,\n      pageTitle: document.title,\n      jobsInUI: document.body.innerText.includes('Jobs: ') ? \n        document.body.innerText.match(/Jobs: (\\d+)/)?.[1] : 'not found'\n    });\n  }, 3000);\n});"},"level":"debug","message":"Tool call received","service":"mcp-puppeteer","timestamp":"2025-08-06 14:47:59.296","tool":"puppeteer_evaluate"}
{"level":"debug","message":"Executing script in browser","scriptLength":782,"service":"mcp-puppeteer","timestamp":"2025-08-06 14:47:59.297"}
{"hasResult":true,"level":"debug","logCount":0,"message":"Script execution result","resultType":"object","service":"mcp-puppeteer","timestamp":"2025-08-06 14:48:02.881"}
{"arguments":{"script":"window.location.reload(); return { status: 'reloading' };"},"level":"debug","message":"Tool call received","service":"mcp-puppeteer","timestamp":"2025-08-06 14:48:31.911","tool":"puppeteer_evaluate"}
{"level":"debug","message":"Executing script in browser","scriptLength":57,"service":"mcp-puppeteer","timestamp":"2025-08-06 14:48:31.911"}
{"hasResult":true,"level":"debug","logCount":0,"message":"Script execution result","resultType":"object","service":"mcp-puppeteer","timestamp":"2025-08-06 14:48:31.913"}
{"arguments":{"script":"// Comprehensive debug log capture\nreturn new Promise((resolve) => {\n  const logs = [];\n  const originalConsole = {\n    log: console.log,\n    error: console.error,\n    warn: console.warn\n  };\n  \n  // Override all console methods to capture debug info\n  ['log', 'error', 'warn'].forEach(method => {\n    console[method] = function(...args) {\n      const timestamp = new Date().toISOString();\n      const logEntry = {\n        type: method,\n        timestamp,\n        message: args.map(arg => \n          typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)\n        ).join(' ')\n      };\n      \n      if (logEntry.message.includes('DEBUG') || \n          logEntry.message.includes('ERROR') ||\n          logEntry.message.includes('cataloging')) {\n        logs.push(logEntry);\n      }\n      \n      originalConsole[method].apply(console, args);\n    };\n  });\n  \n  // Wait for React components to mount and queries to execute\n  setTimeout(() => {\n    // Restore original console\n    Object.assign(console, originalConsole);\n    \n    resolve({\n      debugLogs: logs,\n      currentUrl: window.location.href,\n      bodyText: document.body.innerText.substring(0, 1000),\n      hasJobs: document.body.innerText.includes('Jobs: ') ? \n        document.body.innerText.match(/Jobs: (\\d+)/)?.[1] : 'not found',\n      hasErrors: logs.some(log => log.type === 'error')\n    });\n  }, 4000); // Give more time for async operations\n});"},"level":"debug","message":"Tool call received","service":"mcp-puppeteer","timestamp":"2025-08-06 14:48:41.519","tool":"puppeteer_evaluate"}
{"level":"debug","message":"Executing script in browser","scriptLength":1422,"service":"mcp-puppeteer","timestamp":"2025-08-06 14:48:41.519"}
{"hasResult":true,"level":"debug","logCount":0,"message":"Script execution result","resultType":"object","service":"mcp-puppeteer","timestamp":"2025-08-06 14:48:45.881"}
{"arguments":{},"level":"debug","message":"Tool call received","service":"mcp-puppeteer","timestamp":"2025-08-06 16:06:42.054","tool":"puppeteer_connect_active_tab"}
{"level":"info","message":"Connecting to existing browser","service":"mcp-puppeteer","timestamp":"2025-08-06 16:06:42.058","wsEndpoint":"ws://localhost:9222/devtools/browser/5d284c39-6e34-4315-abba-b667bcb66d97"}
{"level":"debug","message":"Establishing connection to browser","service":"mcp-puppeteer","timestamp":"2025-08-06 16:06:42.058"}
{"level":"info","message":"Successfully connected to browser","service":"mcp-puppeteer","timestamp":"2025-08-06 16:06:42.061"}
{"level":"info","message":"Found active webpage:","service":"mcp-puppeteer","timestamp":"2025-08-06 16:06:42.120","title":"Create Next App","url":"http://localhost:3001/cataloging"}
{"arguments":{"name":"current_page_with_badges"},"level":"debug","message":"Tool call received","service":"mcp-puppeteer","timestamp":"2025-08-06 16:06:45.354","tool":"puppeteer_screenshot"}
{"arguments":{"script":"// Let's inspect the Badge components and their computed styles\nconst badges = document.querySelectorAll('[class*=\"rounded-full\"][class*=\"border\"]');\nconst results = [];\n\nbadges.forEach((badge, index) => {\n  const computedStyle = window.getComputedStyle(badge);\n  const classList = Array.from(badge.classList);\n  \n  results.push({\n    index,\n    element: badge.tagName,\n    text: badge.textContent?.trim(),\n    classList,\n    borderColor: computedStyle.borderColor,\n    borderWidth: computedStyle.borderWidth,\n    borderStyle: computedStyle.borderStyle,\n    backgroundColor: computedStyle.backgroundColor,\n    color: computedStyle.color\n  });\n});\n\n// Also check for any CSS custom properties being used\nconst rootStyles = window.getComputedStyle(document.documentElement);\nconst cssVars = {\n  '--border': rootStyles.getPropertyValue('--border').trim(),\n  '--input': rootStyles.getPropertyValue('--input').trim(),\n  '--primary': rootStyles.getPropertyValue('--primary').trim(),\n  '--secondary': rootStyles.getPropertyValue('--secondary').trim(),\n  '--muted-foreground': rootStyles.getPropertyValue('--muted-foreground').trim()\n};\n\nreturn { badges: results, cssVars };"},"level":"debug","message":"Tool call received","service":"mcp-puppeteer","timestamp":"2025-08-06 16:06:53.531","tool":"puppeteer_evaluate"}
{"level":"debug","message":"Executing script in browser","scriptLength":1166,"service":"mcp-puppeteer","timestamp":"2025-08-06 16:06:53.531"}
{"hasResult":true,"level":"debug","logCount":0,"message":"Script execution result","resultType":"object","service":"mcp-puppeteer","timestamp":"2025-08-06 16:06:53.532"}
{"arguments":{"debugPort":9222,"targetUrl":"http://localhost:3001"},"level":"debug","message":"Tool call received","service":"mcp-puppeteer","timestamp":"2025-08-06 16:08:21.625","tool":"puppeteer_connect_active_tab"}
{"level":"info","message":"Connecting to existing browser","service":"mcp-puppeteer","targetUrl":"http://localhost:3001","timestamp":"2025-08-06 16:08:21.628","wsEndpoint":"ws://localhost:9222/devtools/browser/5d284c39-6e34-4315-abba-b667bcb66d97"}
{"level":"debug","message":"Establishing connection to browser","service":"mcp-puppeteer","timestamp":"2025-08-06 16:08:21.628"}
{"level":"info","message":"Successfully connected to browser","service":"mcp-puppeteer","timestamp":"2025-08-06 16:08:21.631"}
{"level":"info","message":"Found active webpage:","service":"mcp-puppeteer","timestamp":"2025-08-06 16:08:21.688","title":"Create Next App","url":"http://localhost:3001/cataloging"}
{"arguments":{"name":"calendar_icon_debug"},"level":"debug","message":"Tool call received","service":"mcp-puppeteer","timestamp":"2025-08-06 16:08:26.027","tool":"puppeteer_screenshot"}
{"arguments":{"script":"// Find all date input elements and examine their styling\nconst dateInputs = document.querySelectorAll('input[type=\"date\"], input[data-slot=\"date-input\"]');\nconsole.log('Found date inputs:', dateInputs.length);\n\nconst results = [];\ndateInputs.forEach((input, index) => {\n  const computedStyle = window.getComputedStyle(input);\n  const pseudoElement = window.getComputedStyle(input, '::-webkit-calendar-picker-indicator');\n  \n  results.push({\n    index: index,\n    type: input.type,\n    dataSlot: input.getAttribute('data-slot'),\n    position: computedStyle.position,\n    paddingRight: computedStyle.paddingRight,\n    pseudoElementDisplay: pseudoElement.display,\n    pseudoElementOpacity: pseudoElement.opacity,\n    pseudoElementPosition: pseudoElement.position,\n    pseudoElementRight: pseudoElement.right,\n    pseudoElementTop: pseudoElement.top,\n    pseudoElementTransform: pseudoElement.transform,\n    pseudoElementWidth: pseudoElement.width,\n    pseudoElementHeight: pseudoElement.height,\n    pseudoElementBackground: pseudoElement.background,\n    pseudoElementBackgroundImage: pseudoElement.backgroundImage,\n    pseudoElementCursor: pseudoElement.cursor,\n    pseudoElementZIndex: pseudoElement.zIndex,\n    // Check if the calendar icon is actually visible\n    boundingRect: input.getBoundingClientRect(),\n    hasCalendarIcon: !!input.querySelector('::-webkit-calendar-picker-indicator')\n  });\n});\n\nreturn results;"},"level":"debug","message":"Tool call received","service":"mcp-puppeteer","timestamp":"2025-08-06 16:08:37.154","tool":"puppeteer_evaluate"}
{"level":"debug","message":"Executing script in browser","scriptLength":1418,"service":"mcp-puppeteer","timestamp":"2025-08-06 16:08:37.154"}
{"hasResult":true,"level":"debug","logCount":1,"message":"Script execution result","resultType":"object","service":"mcp-puppeteer","timestamp":"2025-08-06 16:08:37.155"}
